/**
 * global
 */
@use 'sass:math';

/**
 * [globalStrConcat description]
 * @param  {[type]} $val [description]
 * @return {[type]}      [description]
 */
@function globalStrConcat($val) {
	$i: str_index($val, '-');
	$start: str_slice($val, 1, 1);
	@if ($i) {
		$end: str_slice($val, ($i+1), ($i+1));
		@return #{$start}#{$end};
	} @else {
		@return #{$start};
	}
}

/**
 * [globalFontSize 输出全局g-fs-#{值}]
 * @param  {[number]} $fontSize   [font-size的值]
 * @param  {[string]} $unit:$unit [单位]
 * @return {[type]}             [description]
 */
@mixin globalFontSize($fontSize, $unit:$unit) {
	@for $i from 1 through length($fontSize) {
		@if (type-of(nth($fontSize, $i)) == 'number') {
			@if (unitless(nth($fontSize, $i))) {
				.g-fs-#{nth($fontSize, $i)} {
					font-size: #{nth($fontSize, $i)}#{$unit};
				}
			} @else {
				.g-fs-#{nth($fontSize, $i)} {
					font-size: #{nth($fontSize, $i)};
				}
			}
		}
	}
}

/**
 * [globalFontSize 输出全局g-lh-#{值}]
 * @param  {[number]} $fontSize   [font-size的值]
 * @param  {[string]} $unit:$unit [单位]
 * @return {[type]}             [description]
 */
@mixin globalLineHeight($line-height, $unit:$unit) {
	@for $i from 1 through length($line-height) {
		@if (type-of(nth($line-height, $i)) == 'number') {
			@if (unitless(nth($line-height, $i))) {
				.g-lh-#{nth($line-height, $i)} {
					line-height: #{nth($line-height, $i)}#{$unit};
				}
			} @else {
				.g-lh-#{nth($line-height, $i)} {
					line-height: #{nth($line-height, $i)};
				}
			}
		}
	}
}

/**
 * [globalPadding 输出全局padding g-pd-#{值/名称} ]
 * @param  {[type]} $padding [方向 值 ]
 * @return {[type]}          [description]
 */
@mixin globalPadding($padding) {
	@each $t, $lis in $padding {
		@if (str_length($t) > 4) {
			@debug error padding;
		} @else {
			@if (str_length($t) == 4 or str_length($t) == 0 ) {
				@each $v in $lis {
					@if (type_of($v) == 'number') {
						.g-pd-#{$v} {
							@include commonPadding($v);
						}
					} @else {
						.g-pd-#{nth(map-keys($v),1)} {
							@include commonPadding(nth(map-values($v),1));
						}
					}

				}
			} @else {
				@each $v in $lis {
					@if (type_of($v) == 'number') {
						.g-pd-#{$t}-#{$v} {
							@include commonPadding($t, $v);
						}
					} @else {
						.g-pd-#{$t}-#{nth(map-keys($v),1)} {
							@include commonPadding($t, nth(map-values($v),1));
						}
					}
				}
			}
		}

	}
}

/**
 * [globalMargin 输出全局margin g-m-#{值/名称}]
 * @param  {[type]} $margin [方向 值]
 * @return {[type]}         [description]
 */
@mixin globalMargin($margin) {
	@each $t, $lis in $margin {
		@if (str_length($t) > 4) {
			@debug error margin;
		} @else {
			@if (str_length($t) == 4 or str_length($t) == 0) {
				@each $v in $lis {
					@if (type_of($v) == 'number') {
						.g-m-#{$v} {
							@include commonMargin($v);
						}
					} @else {
						.g-m-#{nth(map-keys($v),1)} {
							@include commonMargin(nth(map-values($v),1));
						}
					}
				}
			} @else {
				@each $v in $lis {
					@if (type_of($v) == 'number') {
						.g-m-#{$t}-#{$v} {
							@include commonMargin($t, $v);
						}
					} @else {
						.g-m-#{$t}-#{nth(map-keys($v),1)} {
							@include commonMargin($t, nth(map-values($v),1));
						}
					}
				}
			}
		}

	}
}

/**
 * [globalLayout 输出全局栅格，浮动]
 * @param  {[number]} $total [平均分成几等分]
 * @return {[type]}        [description]
 */
@mixin globalLayout($total) {
	%float {
		float: left;
	}
	@for $i from 1 through $total {
		.g-w-#{$i} {
			width: commonColumnWidth($i, $total);
		}
		.g-fw-#{$i} {
			@extend %float;
			@extend .g-w-#{$i};
		}
	}
}

/**
 * [globalColor 输出全局字体颜色]
 * @param  {[array]} $color [名称 字体颜色]
 * @return {[type]}        [description]
 */
@mixin globalColor($color) {
	@each $name, $code in $color {
		@if (type-of($code) == 'color') {
			.g-c-#{$name} {
				color: $code !important;
			}
		}
	}
}

/**
 * [globalBgColor 输出全局背景颜色]
 * @param  {[array]} $bgColor [名称 背景色 字体颜色默认白色]
 * @return {[type]}          [description]
 */
@mixin globalBgColor($bgColor) {
	@each $name, $code, $code2 in $bgColor {
		@if (type-of($code) == 'color') {
			.g-bg-#{$name} {
				background-color: $code;
				@if (type-of($code2) == 'color') {
					color: $code2;
				}
			}
		}
	}
}

/**
 * [globalBgLineColor 输出全局渐变背景颜色]
 * @param  {[array]} $bgColor [方向 名称 背景色1 背景色2]
 * @return {[type]}          [description]
 */
@mixin globalBgLineColor($bgLineColor) {
	@each $grad, $name, $code, $code2 in $bgLineColor {
		@if (type-of($code) == 'color') {
			.g-bg-lg-#{$name} {
				@include commonBgLinear($grad, $code, $code2);
			}
		}
	}
}

/**
 * [globalFlex 输出flex单个属性]
 * @param  {[string]} $attr   [属性名]
 * @param  {[array]} $key... [属性值]
 * @return {[type]}         [description]
 */
@mixin globalFlex($attr, $key...) {
	@each $k in $key {
		.g-#{globalStrConcat($attr)}-#{globalStrConcat($k)} {
			#{$attr}: $k;
		}
	}
}

/**
 * [globalGrid 网格布局]
 * @param  {[number]} $col:             3             [分成几列]
 * @param  {[string]} $flex-direction:  column        [主轴方向]
 * @param  {[string]} $justify-content: center        [水平居中]
 * @param  {[string]} $align-items:     center        [垂直居中]
 * @param  {[bool]} $border:          true          [是否有border]
 * @return {[type]}                   [description]
 */
@mixin globalGrid($col: 3, $flex-direction: column, $justify-content: center, $align-items: center, $border: true) {
	display: flex;
	flex-wrap: wrap;
	> * {
		flex: 0 0 #{math.div(100, $col)}#{'%'};
		width: #{math.div(100, $col)}vw; // 兼容
		display: flex;
		flex-direction: $flex-direction;
		justify-content: $justify-content;
		align-items: $align-items;
		box-sizing: border-box;
	}
	@if ($border) {
		> * {
			@include commonBorder1PX(right);
			@include commonBorder1PX(bottom);
		}
		> *:nth-child(#{$col}n) {
			&:before {
				border-right: none;
			}
		}
	}
}

/**
 * [globalImgSize 图片大小]
 * @param     {[type]}    $imgsize [description]
 * @return    {[type]}             [description]
 */
@mixin globalImgSize($imgsize) {
	@for $i from 1 through length($imgsize) {
		.g-img-#{nth($imgsize, $i)} {
			max-width: #{nth($imgsize, $i)}#{$unit};
			min-width: #{nth($imgsize, $i)}#{$unit};
			width: #{nth($imgsize, $i)}#{$unit};
			height: #{nth($imgsize, $i)}#{$unit};
			line-height: #{nth($imgsize, $i)}#{$unit};
		}
	}
	
}

/**
 * [globalImgSize 图片大小]
 * @param     {[type]}    $imgsize [description]
 * @return    {[type]}             [description]
 */
@mixin globalCircleImgSize($imgsize) {
	@for $i from 1 through length($imgsize) {
		.g-imgc-#{nth($imgsize, $i)} {
			max-width: #{nth($imgsize, $i)}#{$unit};
			min-width: #{nth($imgsize, $i)}#{$unit};
			width: #{nth($imgsize, $i)}#{$unit};
			height: #{nth($imgsize, $i)}#{$unit};
			line-height: #{nth($imgsize, $i)}#{$unit};
			border-radius: 50%;
		}
	}
	
}
@mixin globalRadiusImgSize($imgsize) {
	@for $i from 1 through length($imgsize) {
		.g-imgr-#{nth($imgsize, $i)} {
			max-width: #{nth($imgsize, $i)}#{$unit};
			min-width: #{nth($imgsize, $i)}#{$unit};
			width: #{nth($imgsize, $i)}#{$unit};
			height: #{nth($imgsize, $i)}#{$unit};
			line-height: #{nth($imgsize, $i)}#{$unit};
			border-radius: 4px;
		}
	}
	
}
