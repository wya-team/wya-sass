@use 'sass:math';

/**
 * [commonDirectionFill 方向名词补充]
 * @param  {[string]} $key [l r b t]
 * @return {[string]}      [left right bottom top]
 */
@function commonDirectionFill($key) {
	@if ($key == 'l') {
		@return 'left';
	} @else if ($key == 'r') {
		@return 'right';
	} @else if ($key == 't') {
		@return 'top';
	} @else if ($key == 'b') {
		@return 'bottom';
	} @else {
		@return null;
	}
}

/**
 * [commonColumnWidth 平均分配百分比]
 * @param  {[number]} $col   [所占比]
 * @param  {[number]} $total [总]
 * @return {[number]}        [所占比/总 * 100%]
 */
@function commonColumnWidth($col, $total) {
	@return percentage(math.div($col, $total));
}

/**
 * [commonBorder 1px的兼容问题]
 * @param  {[string]} $border: ltbr          [border的方向缩写拼接]
 * @return {[type]}          [1px border]
 */

/**
 * 1px
 * 已为父元素添加position: relative;
 * 其他只操作before和after;
 * 暂时不抽离公用
 */

@mixin commonBorder1PX($direction: '', $color: $border-color, $media: true) {
	position: relative;
	transform: translateZ(0);
	& {
		&:before,
		&:after {
			position: absolute;
			content: " ";
			display: block; // 父类为flex, 使用table无法撑开
			clear: both;
			box-sizing: border-box;
			pointer-events: none;
			z-index: 1; // 层级应高于其他元素, 否则描边会被遮挡 
			border-radius: inherit; // 圆角集成
		}
		@if $direction == 'top' {
			&:before {
				border-top: 1px solid $color;
				left: 0;
				top: 0;
				width: 100%;
				transform-origin: 0 top;
			}
		} @else if $direction == 'right' {
			&:after {
				border-right: 1px solid $color;
				top: 0;
				right: 0;
				height: 100%;
				transform-origin: right 0;
			}
		} @else if $direction == 'bottom' {
			&:after {
				border-bottom: 1px solid $color;
				left: 0;
				bottom: 0;
				width: 100%;
				transform-origin: 0 bottom;
			}
		} @else if $direction == 'left' {
			&:before {
				border-left: 1px solid $color;
				top: 0;
				left: 0;
				height: 100%;
				transform-origin: left 0;
			}
		} @else {
			&:after {
				border: 1px solid $color;
				left: 0;
				top: 0;
				width: 100%;
				height: 100%;
				transform-origin: 0 0;
			}
		}
	}
	@if $media == true {
		@media (min-resolution: 2dppx) {
			& {
				@if $direction == 'top' {
					&:before {
						width: 200%;
						transform: scale(0.5);
					}
				} @else if $direction == 'right' {
					&:after {
						height: 200%;
						transform: scale(0.5);
					}
				} @else if $direction == 'bottom' {
					&:after {
						width: 200%;
						transform: scale(0.5);
					}
				} @else if $direction == 'left' {
					&:before {
						height: 200%;
						transform: scale(0.5);
					}
				} @else {
					&:after {
						width: 200%;
						height: 200%;
						transform: scale(0.5);
					}
				}
			}
		}
		@media (min-resolution: 3dppx) {
			& {
				@if $direction == 'top' {
					&:before {
						width: 300%;
						transform: scale(0.333);
					}
				} @else if $direction == 'right' {
					&:after {
						height: 300%;
						transform: scale(0.333);
					}
				} @else if $direction == 'bottom' {
					&:after {
						width: 300%;
						transform: scale(0.333);
					}
				} @else if $direction == 'left' {
					&:before {
						height: 300%;
						transform: scale(0.333);
					}
				} @else {
					&:after {
						width: 300%;
						height: 300%;
						transform: scale(0.333);
					}
				}
			}
		}
	}
}

/**
 * [commonPadding padding]
 * @param  {[number/string]} $t  [string 方向首字母拼接 top的距离]
 * @param  {[number]} $r: $t            [right的距离]
 * @param  {[number]} $b: $t            [bottom的距离]
 * @param  {[number]} $l: $r            [left的距离]
 * @return {[type]}     [description]
 */
@mixin commonPadding($t, $r: $t, $b: $t, $l: $r) {
	@if (type-of($t) == 'number') {
		padding: if(unitless($t), #{$t}#{$unit}, #{$t}) if(unitless($r), #{$r}#{$unit}, #{$r}) if(unitless($b), #{$b}#{$unit}, #{$b}) if(unitless($l), #{$l}#{$unit}, #{$l});
	} @else if (type-of($t) == 'string') {
		$len: str_length($t);
		@while $len > 0 {
			@if (commonDirectionFill(str_slice($t, $len, $len))) {
				padding-#{commonDirectionFill(str_slice($t, $len, $len))}: if(unitless($r), #{$r}#{$unit}, #{$r});
			}
			$len: $len - 1;
		}
	}
}

/**
 * [commonMargin margin]
* @param  {[number/string]} $t  [string 方向首字母拼接 top的距离]
 * @param  {[number]} $r: $t            [right的距离]
 * @param  {[number]} $b: $t            [bottom的距离]
 * @param  {[number]} $l: $r            [left的距离]
 * @return {[type]}     [description]
 */
@mixin commonMargin($t, $r: $t, $b: $t, $l: $r) {
	@if (type-of($t) == 'number') {
		margin: if(unitless($t), #{$t}#{$unit}, #{$t}) if(unitless($r), #{$r}#{$unit}, #{$r}) if(unitless($b), #{$b}#{$unit}, #{$b}) if(unitless($l), #{$l}#{$unit}, #{$l});
	} @else if (type-of($t) == 'string') {
		$len: str_length($t);
		@while $len > 0 {
			@if (commonDirectionFill(str_slice($t, $len, $len))) {
				margin-#{commonDirectionFill(str_slice($t, $len, $len))}: if(unitless($r), #{$r}#{$unit}, #{$r});
			}
			$len: $len - 1;
		}
	}
}

/**
 * [commonAbsolute absolute]
 * @param  {[list]} $direction-val... [top, right, bottom, left 的值]
 * @return {[type]}                   [description]
 */
@mixin commonAbsolute($direction-val...) {
	position: absolute;
	$direction: top, right, bottom, left;
	@for $i from 1 through 4 {
		@if (type_of(nth($direction-val, $i)) == 'number') {
			#{nth($direction, $i)}: nth($direction-val, $i);
		}
	}

}

@mixin commonBgLinear($angle: to bottom, $start: #fff, $end: #000) {
	background: $end;
	background-image: linear-gradient($angle, $start, $end);
}

/**
 * 水平垂直居中
 */
@mixin commonFlexCc {
	display: flex;
	align-items: center;
	justify-content: center;
}

/**
 * 文字相关
 */

/**
 * 一行文字
 */
@mixin commonEllipsis {
	width: auto;
	overflow: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
}

/* stylelint-disable */
@mixin commonTextLine($line) {
	overflow: hidden;
	text-overflow: ellipsis;
	display: -webkit-box;
	-webkit-line-clamp: $line;

	/*! autoprefixer: ignore next */
	-webkit-box-orient: vertical;
}

/**
 * [commonClearfix 清除浮动]
 * @return {[type]} [description]
 */

@mixin commonClearfix($content: false) {
	zoom: 1;
	&:before,
	&:after {
		content: " ";
		display: block; // 父类为flex, 使用table无法撑开
		clear: both;
		@if $content {
			@content;
		} @else {
			visibility: hidden;
			font-size: 0;
			height: 0;
		}
 		
	}
}

@mixin commonScroll($size: 4px) {
	/**
	 * scrollbar width
	 */
	&::-webkit-scrollbar {
		width: $size; // 很有影响
	}

	::-webkit-scrollbar:horizontal {
		height: $size;
	}

	/**
	 * scrollbar bg
	 */
	&::-webkit-scrollbar-track {
		-webkit-box-shadow: inset 0 0 10px rgba(0, 0, 0, 0);
		-webkit-border-radius: 5px;
		border-radius: 5px;
		background: rgba(0, 0, 0, 0);
	}

	/**
	 * Handle
	 */
	&::-webkit-scrollbar-thumb {
		-webkit-border-radius: 5px;
		border-radius: 5px;
		background: rgba(0, 0, 0, 0.2);
	}
}
